{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CandidateService {\n  constructor(_http) {\n    this._http = _http;\n    this.id_candidato = 0;\n    this.correo = \"\";\n    this.candidato = new Candidato();\n    this.postulaciones = [];\n    this.postulaciones$ = new Subject();\n  }\n  ngOnInit() {}\n  ngOnDestroy() {}\n  guaradarCorreo(correo) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n  obtener(CandidateRequest) {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + CandidateRequest;\n    return this._http.get(cadena).toPromise();\n  }\n  registrar(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).subscribe(resultado => {\n      this.id_candidato = resultado;\n    });\n    return this.id_candidato;\n  }\n  modificar(CandidatoDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n  buscarporFiltro(BusquedaDTO) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n  postularse(PostDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n    this.esparcirPostulaciones();\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n  obtenerPostulaciones(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get(cadena);\n  }\n  eliminarPostulacion(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    this.esparcirPostulaciones();\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n  }\n  getPostulaciones() {\n    return this.postulaciones$.asObservable();\n  }\n  esparcirPostulaciones() {\n    this.obtenerPostulaciones(this.candidato.id_candidato).subscribe(data => {\n      this.postulaciones = data;\n      console.log(this.postulaciones);\n    });\n    this.postulaciones$.next(this.postulaciones);\n  }\n}\nCandidateService.ɵfac = function CandidateService_Factory(t) {\n  return new (t || CandidateService)(i0.ɵɵinject(i1.HttpClient));\n};\nCandidateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CandidateService,\n  factory: CandidateService.ɵfac,\n  providedIn: 'root'\n});\nexport { CandidateService };","map":{"version":3,"names":["Subject","Candidato","CandidateService","constructor","_http","id_candidato","correo","candidato","postulaciones","postulaciones$","ngOnInit","ngOnDestroy","guaradarCorreo","console","log","obtener","CandidateRequest","cadena","get","toPromise","registrar","put","subscribe","resultado","modificar","CandidatoDTO","obtenerVacantes","buscarporFiltro","BusquedaDTO","postularse","PostDTO","esparcirPostulaciones","obtenerPostulaciones","idRequest","eliminarPostulacion","delete","getPostulaciones","asObservable","data","next","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/CandidateServices/candidate.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\nimport { Postulacion } from '../Entity/postulacion';\nimport { InterfaceService } from '../InterfaceServices/interface.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CandidateService {\n\n\n  id_candidato: any = 0;\n  correo: string = \"\";\n  candidato: Candidato = new Candidato;\n\n  postulaciones: Postulacion[] = [];\n  private postulaciones$ = new Subject<any>();\n\n\n  constructor(private _http: HttpClient) { \n \n  }\n  ngOnInit(): void {\n   \n  }\n  ngOnDestroy(): void {\n    \n  }\n\n  guaradarCorreo(correo:any){\n    this.correo = correo;\n    console.log(this.correo);\n  }\n\n  obtener(CandidateRequest:string) {\n\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + CandidateRequest;\n    return this._http.get<Candidato>(cadena).toPromise();\n  }\n\n  registrar(CandidateRequest: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest)\n      .subscribe(\n        resultado => { this.id_candidato = resultado }\n      );\n    return this.id_candidato;\n  }\n\n  modificar(CandidatoDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n\n  buscarporFiltro(BusquedaDTO: any) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n\n  postularse(PostDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n\n    this.esparcirPostulaciones();\n\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n\n  obtenerPostulaciones(idRequest: number):Observable<Postulacion[]>  {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get<Postulacion[]>(cadena);\n  }\n\n  eliminarPostulacion(idRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    this.esparcirPostulaciones();\n\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n\n  }\n\n  getPostulaciones(): Observable<Postulacion[]> {\n    return this.postulaciones$.asObservable();\n  }\n\n  esparcirPostulaciones() {\n      this.obtenerPostulaciones(this.candidato.id_candidato).subscribe(data => {\n        this.postulaciones = data;\n        console.log(this.postulaciones);\n      });\n    this.postulaciones$.next(this.postulaciones);\n  }\n\n\n\n\n}\n\n"],"mappings":"AAEA,SAAqBA,OAAO,QAAsB,MAAM;AACxD,SAASC,SAAS,QAAQ,qBAAqB;;;AAI/C,MAGaC,gBAAgB;EAW3BC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IARzB,KAAAC,YAAY,GAAQ,CAAC;IACrB,KAAAC,MAAM,GAAW,EAAE;IACnB,KAAAC,SAAS,GAAc,IAAIN,SAAS,CAAT,CAAS;IAEpC,KAAAO,aAAa,GAAkB,EAAE;IACzB,KAAAC,cAAc,GAAG,IAAIT,OAAO,EAAO;EAK3C;EACAU,QAAQA,CAAA,GAER;EACAC,WAAWA,CAAA,GAEX;EAEAC,cAAcA,CAACN,MAAU;IACvB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpBO,OAAO,CAACC,GAAG,CAAC,IAAI,CAACR,MAAM,CAAC;EAC1B;EAEAS,OAAOA,CAACC,gBAAuB;IAE7BH,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACpCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACE,gBAAgB,CAAC;IAE7B,IAAIC,MAAM,GAAG,+CAA+C,GAAGD,gBAAgB;IAC/E,OAAO,IAAI,CAACZ,KAAK,CAACc,GAAG,CAAYD,MAAM,CAAC,CAACE,SAAS,EAAE;EACtD;EAEAC,SAASA,CAACJ,gBAAqB;IAC7B;IACAH,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACE,gBAAgB,CAAC;IAE7B,IAAI,CAACZ,KAAK,CAACiB,GAAG,CAAC,yCAAyC,EAAEL,gBAAgB,CAAC,CACxEM,SAAS,CACRC,SAAS,IAAG;MAAG,IAAI,CAAClB,YAAY,GAAGkB,SAAS;IAAC,CAAC,CAC/C;IACH,OAAO,IAAI,CAAClB,YAAY;EAC1B;EAEAmB,SAASA,CAACC,YAAiB;IACzB;IACAZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACW,YAAY,CAAC;IAEzB,OAAO,IAAI,CAACrB,KAAK,CAACiB,GAAG,CAAC,0CAA0C,EAAEI,YAAY,CAAC,CAACN,SAAS,EAAE;EAC7F;EAEAO,eAAeA,CAAA;IACb;IACAb,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACvC,OAAO,IAAI,CAACV,KAAK,CAACc,GAAG,CAAC,4CAA4C,CAAC,CAACC,SAAS,EAAE;EACjF;EAEAQ,eAAeA,CAACC,WAAgB;IAC9B;IACA,OAAO,IAAI,CAACxB,KAAK,CAACc,GAAG,CAAC,wBAAwB,EAAEU,WAAW,CAAC,CAACT,SAAS,EAAE;EAC1E;EAEAU,UAAUA,CAACC,OAAY;IACrB;IACAjB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACgB,OAAO,CAAC;IAEpB,IAAI,CAACC,qBAAqB,EAAE;IAE5B,OAAO,IAAI,CAAC3B,KAAK,CAACiB,GAAG,CAAC,mCAAmC,EAAES,OAAO,CAAC,CAACX,SAAS,EAAE;EACjF;EAEAa,oBAAoBA,CAACC,SAAiB;IACpC;IACApB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CD,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGmB,SAAS,CAAC;IAEpD,IAAIhB,MAAM,GAAG,6DAA6D,GAAGgB,SAAS;IACtF,OAAO,IAAI,CAAC7B,KAAK,CAACc,GAAG,CAAgBD,MAAM,CAAC;EAC9C;EAEAiB,mBAAmBA,CAACD,SAAiB;IACnC;IACApB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CD,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAAGmB,SAAS,CAAC;IACtD,IAAI,CAACF,qBAAqB,EAAE;IAE5B,IAAId,MAAM,GAAG,4CAA4C,GAAGgB,SAAS;IACrE,OAAO,IAAI,CAAC7B,KAAK,CAAC+B,MAAM,CAAClB,MAAM,CAAC,CAACE,SAAS,EAAE;EAE9C;EAEAiB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAC3B,cAAc,CAAC4B,YAAY,EAAE;EAC3C;EAEAN,qBAAqBA,CAAA;IACjB,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACzB,SAAS,CAACF,YAAY,CAAC,CAACiB,SAAS,CAACgB,IAAI,IAAG;MACtE,IAAI,CAAC9B,aAAa,GAAG8B,IAAI;MACzBzB,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,aAAa,CAAC;IACjC,CAAC,CAAC;IACJ,IAAI,CAACC,cAAc,CAAC8B,IAAI,CAAC,IAAI,CAAC/B,aAAa,CAAC;EAC9C;;AA9GWN,gBAAgB,C;mBAAhBA,gBAAgB,EAAAsC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBzC,gBAAgB,C;SAAhBA,gBAAgB;EAAA0C,OAAA,EAAhB1C,gBAAgB,CAAA2C,IAAA;EAAAC,UAAA,EAFf;AAAM;SAEP5C,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}