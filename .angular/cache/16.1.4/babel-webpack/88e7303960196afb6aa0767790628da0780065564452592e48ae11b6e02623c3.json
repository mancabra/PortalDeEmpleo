{"ast":null,"code":"import { Candidato } from '../Entity/candidato';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CandidateService {\n  constructor(_http) {\n    this._http = _http;\n    this.id_candidato = 0;\n    this.correo = \"ramon@gmail.com\";\n    this.candidato = new Candidato();\n  }\n  guaradarUsuario(usuario) {\n    this.candidato = usuario;\n  }\n  guaradarCorreo(correo) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get(cadena).toPromise();\n  }\n  registrar(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).subscribe(resultado => {\n      this.id_candidato = resultado;\n    });\n    return this.id_candidato;\n  }\n  modificar(CandidatoDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n  buscarporFiltro(BusquedaDTO) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n  postularse(PostDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n  obtenerPostulaciones(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get(cadena);\n  }\n  eliminarPostulacion(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n  }\n}\nCandidateService.ɵfac = function CandidateService_Factory(t) {\n  return new (t || CandidateService)(i0.ɵɵinject(i1.HttpClient));\n};\nCandidateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CandidateService,\n  factory: CandidateService.ɵfac,\n  providedIn: 'root'\n});\nexport { CandidateService };","map":{"version":3,"names":["Candidato","CandidateService","constructor","_http","id_candidato","correo","candidato","guaradarUsuario","usuario","guaradarCorreo","console","log","obtener","cadena","get","toPromise","registrar","CandidateRequest","put","subscribe","resultado","modificar","CandidatoDTO","obtenerVacantes","buscarporFiltro","BusquedaDTO","postularse","PostDTO","obtenerPostulaciones","idRequest","eliminarPostulacion","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/CandidateServices/candidate.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\nimport { Postulacion } from '../Entity/postulacion';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CandidateService {\n\n\n  id_candidato: any = 0;\n  correo: string = \"ramon@gmail.com\";\n  candidato: Candidato = new Candidato;\n\n  constructor(private _http: HttpClient) { \n\n  }\n\n  guaradarUsuario(usuario:Candidato){\n    this.candidato = usuario;\n  }\n\n  guaradarCorreo(correo:any){\n    this.correo = correo;\n    console.log(this.correo);\n  }\n\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get<Candidato>(cadena).toPromise();\n  }\n\n  registrar(CandidateRequest: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest)\n      .subscribe(\n        resultado => { this.id_candidato = resultado }\n      );\n    return this.id_candidato;\n  }\n\n  modificar(CandidatoDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n\n  buscarporFiltro(BusquedaDTO: any) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n\n  postularse(PostDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n\n\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n\n  obtenerPostulaciones(idRequest: number):Observable<Postulacion[]>  {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get<Postulacion[]>(cadena);\n  }\n\n  eliminarPostulacion(idRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n\n  }\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}