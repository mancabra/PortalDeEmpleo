{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CandidateService {\n  constructor(_http) {\n    this._http = _http;\n    this.correo = \"\";\n    this.postulaciones$ = new Subject();\n    this.postulaciones = [];\n    this.candidato$ = new Subject();\n  }\n  guaradarCorreo(correo) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get(cadena).toPromise();\n  }\n  registrar(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    return this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).toPromise();\n  }\n  modificar(CandidatoDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n  buscarporFiltro(BusquedaDTO) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n  postularse(PostDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n  obtenerPostulaciones(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get(cadena);\n  }\n  eliminarPostulacion(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n  }\n  //OBSERVABLE USUARIO\n  getCandidate() {\n    return this.candidato$.asObservable();\n  }\n  updateCandidate() {\n    this.obtener().then(data => {\n      this.us = data.usuario.tipoUsuario;\n      this.usuarioActivo(this.tipoUsuario);\n    });\n  }\n  esparcir(candidato) {\n    this.candidato$.next(candidato);\n  }\n  hacerVisitante() {\n    this.candidato$.next(this.tipoUsuario);\n  }\n}\nCandidateService.ɵfac = function CandidateService_Factory(t) {\n  return new (t || CandidateService)(i0.ɵɵinject(i1.HttpClient));\n};\nCandidateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CandidateService,\n  factory: CandidateService.ɵfac,\n  providedIn: 'root'\n});\nexport { CandidateService };","map":{"version":3,"names":["Subject","CandidateService","constructor","_http","correo","postulaciones$","postulaciones","candidato$","guaradarCorreo","console","log","obtener","cadena","get","toPromise","registrar","CandidateRequest","put","modificar","CandidatoDTO","obtenerVacantes","buscarporFiltro","BusquedaDTO","postularse","PostDTO","obtenerPostulaciones","idRequest","eliminarPostulacion","delete","getCandidate","asObservable","updateCandidate","then","data","us","usuario","tipoUsuario","usuarioActivo","esparcir","candidato","next","hacerVisitante","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/CandidateServices/candidate.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\nimport { Postulacion } from '../Entity/postulacion';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CandidateService {\n\n  correo: string = \"\";\n  \n\n  private postulaciones$ = new Subject<Postulacion[]>();\n  postulaciones: Postulacion [] = [];\n\n  private candidato$ = new Subject<Candidato>();\n\n\n  constructor(private _http: HttpClient) { \n\n  }\n\n\n  guaradarCorreo(correo:any){\n    this.correo = correo;\n    console.log(this.correo);\n  }\n\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get<Candidato>(cadena).toPromise();\n  }\n\n  registrar(CandidateRequest:any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    return this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).toPromise();\n  }\n\n  modificar(CandidatoDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n\n  buscarporFiltro(BusquedaDTO: any) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n\n  postularse(PostDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n\n  obtenerPostulaciones(idRequest: number):Observable<Postulacion[]>  {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get<Postulacion[]>(cadena);\n  }\n\n  eliminarPostulacion(idRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n\n  }\n\n  //OBSERVABLE USUARIO\n\n  getCandidate(): Observable<Candidato> {\n    return this.candidato$.asObservable();\n  }\n\n  updateCandidate() {\n    this.obtener().then((data:any) =>{\n      this.us = data.usuario.tipoUsuario;\n      this.usuarioActivo(this.tipoUsuario);\n    });\n \n  }\n\n  esparcir(candidato:Candidato){\n    this.candidato$.next(candidato);\n  }\n\n  hacerVisitante(){\n    this.candidato$.next(this.tipoUsuario);\n  }\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}