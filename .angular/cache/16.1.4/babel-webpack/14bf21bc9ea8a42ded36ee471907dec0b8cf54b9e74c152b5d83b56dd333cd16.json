{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CandidateService {\n  constructor(_http) {\n    this._http = _http;\n    this.id_candidato = 0;\n  }\n  obtener(CandidateRequest) {\n    let cadena = \"http://localhost:8080/obtenerUsuario/\" + CandidateRequest;\n    return this._http.get(cadena);\n  }\n  registrar(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).subscribe(resultado => {\n      this.id_candidato = resultado;\n    });\n    return this.id_candidato;\n  }\n  modificar(CandidatoDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n  buscarporFiltro(BusquedaDTO) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n  postularse(PostDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n  obtenerPostulaciones(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get(cadena).toPromise();\n  }\n  eliminarPostulacion(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n  }\n}\nCandidateService.ɵfac = function CandidateService_Factory(t) {\n  return new (t || CandidateService)(i0.ɵɵinject(i1.HttpClient));\n};\nCandidateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CandidateService,\n  factory: CandidateService.ɵfac,\n  providedIn: 'root'\n});\nexport { CandidateService };","map":{"version":3,"names":["CandidateService","constructor","_http","id_candidato","obtener","CandidateRequest","cadena","get","registrar","console","log","put","subscribe","resultado","modificar","CandidatoDTO","toPromise","obtenerVacantes","buscarporFiltro","BusquedaDTO","postularse","PostDTO","obtenerPostulaciones","idRequest","eliminarPostulacion","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/CandidateServices/candidate.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CandidateService {\n  id_candidato: any = 0;\n\n  constructor(private _http: HttpClient) { }\n\n  obtener(CandidateRequest:string):Observable<Candidato>{\n    let cadena = \"http://localhost:8080/obtenerUsuario/\" + CandidateRequest;\n    return this._http.get<Candidato>(cadena);\n  }\n\n  registrar(CandidateRequest: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest)\n      .subscribe(\n        resultado => { this.id_candidato = resultado }\n      );\n    return this.id_candidato;\n  }\n\n  modificar(CandidatoDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n\n\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n\n  buscarporFiltro(BusquedaDTO: any) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n\n  postularse(PostDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n\n  obtenerPostulaciones(idRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get(cadena).toPromise();\n  }\n\n  eliminarPostulacion(idRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n\n  }\n\n\n\n}\n\n"],"mappings":";;AAKA,MAGaA,gBAAgB;EAG3BC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IAFzB,KAAAC,YAAY,GAAQ,CAAC;EAEoB;EAEzCC,OAAOA,CAACC,gBAAuB;IAC7B,IAAIC,MAAM,GAAG,uCAAuC,GAAGD,gBAAgB;IACvE,OAAO,IAAI,CAACH,KAAK,CAACK,GAAG,CAAYD,MAAM,CAAC;EAC1C;EAEAE,SAASA,CAACH,gBAAqB;IAC7B;IACAI,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACL,gBAAgB,CAAC;IAE7B,IAAI,CAACH,KAAK,CAACS,GAAG,CAAC,yCAAyC,EAAEN,gBAAgB,CAAC,CACxEO,SAAS,CACRC,SAAS,IAAG;MAAG,IAAI,CAACV,YAAY,GAAGU,SAAS;IAAC,CAAC,CAC/C;IACH,OAAO,IAAI,CAACV,YAAY;EAC1B;EAEAW,SAASA,CAACC,YAAiB;IACzB;IACAN,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;IAEzB,OAAO,IAAI,CAACb,KAAK,CAACS,GAAG,CAAC,0CAA0C,EAAEI,YAAY,CAAC,CAACC,SAAS,EAAE;EAC7F;EAGAC,eAAeA,CAAA;IACb;IACAR,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAEvC,OAAO,IAAI,CAACR,KAAK,CAACK,GAAG,CAAC,4CAA4C,CAAC,CAACS,SAAS,EAAE;EACjF;EAEAE,eAAeA,CAACC,WAAgB;IAC9B;IACA,OAAO,IAAI,CAACjB,KAAK,CAACK,GAAG,CAAC,wBAAwB,EAAEY,WAAW,CAAC,CAACH,SAAS,EAAE;EAC1E;EAEAI,UAAUA,CAACC,OAAY;IACrB;IACAZ,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACW,OAAO,CAAC;IAEpB,OAAO,IAAI,CAACnB,KAAK,CAACS,GAAG,CAAC,mCAAmC,EAAEU,OAAO,CAAC,CAACL,SAAS,EAAE;EACjF;EAEAM,oBAAoBA,CAACC,SAAiB;IACpC;IACAd,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3CD,OAAO,CAACC,GAAG,CAAC,2BAA2B,GAAGa,SAAS,CAAC;IAEpD,IAAIjB,MAAM,GAAG,6DAA6D,GAAGiB,SAAS;IACtF,OAAO,IAAI,CAACrB,KAAK,CAACK,GAAG,CAACD,MAAM,CAAC,CAACU,SAAS,EAAE;EAC3C;EAEAQ,mBAAmBA,CAACD,SAAiB;IACnC;IACAd,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CD,OAAO,CAACC,GAAG,CAAC,6BAA6B,GAAGa,SAAS,CAAC;IAEtD,IAAIjB,MAAM,GAAG,4CAA4C,GAAGiB,SAAS;IACrE,OAAO,IAAI,CAACrB,KAAK,CAACuB,MAAM,CAACnB,MAAM,CAAC,CAACU,SAAS,EAAE;EAE9C;;AAvEWhB,gBAAgB,C;mBAAhBA,gBAAgB,EAAA0B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhB7B,gBAAgB,C;SAAhBA,gBAAgB;EAAA8B,OAAA,EAAhB9B,gBAAgB,CAAA+B,IAAA;EAAAC,UAAA,EAFf;AAAM;SAEPhC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}