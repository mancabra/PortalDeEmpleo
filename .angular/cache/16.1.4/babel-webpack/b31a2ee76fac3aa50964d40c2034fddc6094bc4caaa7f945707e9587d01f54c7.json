{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass CandidateService {\n  //private candidato$ = new Subject<Candidato>();\n  //candidato: Candidato = new Candidato;\n  constructor(_http) {\n    this._http = _http;\n    this.correo = \"\";\n    this.postulaciones$ = new Subject();\n    this.postulaciones = [];\n  }\n  guaradarCorreo(correo) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get(cadena).toPromise();\n  }\n  registrar(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    return this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).toPromise();\n  }\n  modificar(CandidatoDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n  obtenerVacantesCercanas(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesCercanas\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    let cadena = \"http://localhost:8080/obtenerVacantesCerca/\" + CandidateRequest;\n    return this._http.get(cadena).toPromise();\n  }\n  obtenerVacantesMejorPagadas() {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesMejorPagadas\");\n    return this._http.get(\"http://localhost:8080/obtenerVacantesPorSueldo\").toPromise();\n  }\n  obtenerVacantesPorPalabra(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesPorPalabra\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    let cadena = \"http://localhost:8080/obtenerVacantesPorPalabraClave/\" + CandidateRequest;\n    return this._http.get(cadena).toPromise();\n  }\n  buscarporMunicipio_Nombre(id_municipio, filtroActivo) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesPorPalabra\");\n    console.log(\"Info Enviada\");\n    console.log(id_municipio);\n    console.log(filtroActivo);\n    let cadena = \"http://localhost:8080/obtenerVacantesCercaYPorPalabraClave?id_municipio=\" + id_municipio + \"&palabraClave=\" + filtroActivo;\n    return this._http.get(cadena).toPromise();\n  }\n  buscarporEstado(id_estado) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesPorEsatdo\");\n    console.log(\"Info Enviada\");\n    console.log(id_estado);\n    let cadena = \"http://localhost:8080/obtenerVacantesEstado/\" + id_estado;\n    return this._http.get(cadena).toPromise();\n  }\n  postularse(PostDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n  obtenerPostulaciones(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get(cadena);\n  }\n  eliminarPostulacion(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n  }\n  //OBSERVABLE USUARIO\n  /*\n  getCandidate(): Observable<Candidato> {\n    return this.candidato$.asObservable();\n  }\n     updateCandidate() {\n    this.obtener().then((data: any) => {\n      this.candidato = data;\n      this.esparcir(this.candidato);\n    });\n  }\n     esparcir(candidato: Candidato) {\n    this.candidato$.next(candidato);\n  }\n     guaradarUsuario(usuario: Candidato) {\n    this.candidato = usuario;\n    this.candidato$.next(this.candidato);\n  }\n  */\n  //OBSERVABLE POSTULACIONES\n  getRequest() {\n    return this.postulaciones$.asObservable();\n  }\n  updateRequest(id_candidato) {\n    this.obtenerPostulaciones(id_candidato).subscribe(data => {\n      this.postulaciones = data;\n      this.esparcirRequest(this.postulaciones);\n    });\n  }\n  esparcirRequest(postulaciones) {\n    this.postulaciones = postulaciones;\n    this.postulaciones$.next(this.postulaciones);\n  }\n}\nCandidateService.ɵfac = function CandidateService_Factory(t) {\n  return new (t || CandidateService)(i0.ɵɵinject(i1.HttpClient));\n};\nCandidateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CandidateService,\n  factory: CandidateService.ɵfac,\n  providedIn: 'root'\n});\nexport { CandidateService };","map":{"version":3,"names":["Subject","CandidateService","constructor","_http","correo","postulaciones$","postulaciones","guaradarCorreo","console","log","obtener","cadena","get","toPromise","registrar","CandidateRequest","put","modificar","CandidatoDTO","obtenerVacantes","obtenerVacantesCercanas","obtenerVacantesMejorPagadas","obtenerVacantesPorPalabra","buscarporMunicipio_Nombre","id_municipio","filtroActivo","buscarporEstado","id_estado","postularse","PostDTO","obtenerPostulaciones","idRequest","eliminarPostulacion","delete","getRequest","asObservable","updateRequest","id_candidato","subscribe","data","esparcirRequest","next","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/CandidateServices/candidate.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\nimport { Postulacion } from '../Entity/postulacion';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CandidateService {\n\n  correo: string = \"\";\n\n  private postulaciones$ = new Subject<Postulacion[]>();\n  postulaciones: Postulacion[] = [];\n\n  //private candidato$ = new Subject<Candidato>();\n  //candidato: Candidato = new Candidato;\n\n  constructor(private _http: HttpClient) {\n\n  }\n\n  guaradarCorreo(correo: any) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get<Candidato>(cadena).toPromise();\n  }\n\n  registrar(CandidateRequest: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    return this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).toPromise();\n  }\n\n  modificar(CandidatoDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n\n  obtenerVacantesCercanas(CandidateRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesCercanas\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    let cadena = \"http://localhost:8080/obtenerVacantesCerca/\" + CandidateRequest;\n    return this._http.get(cadena).toPromise();\n  }\n\n  obtenerVacantesMejorPagadas() {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesMejorPagadas\");\n    return this._http.get(\"http://localhost:8080/obtenerVacantesPorSueldo\").toPromise();\n  }\n\n  obtenerVacantesPorPalabra(CandidateRequest: string) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesPorPalabra\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    let cadena = \"http://localhost:8080/obtenerVacantesPorPalabraClave/\" + CandidateRequest;\n    return this._http.get(cadena).toPromise();\n  }\n\n  buscarporMunicipio_Nombre(id_municipio: number, filtroActivo: string) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesPorPalabra\");\n    console.log(\"Info Enviada\");\n    console.log(id_municipio);\n    console.log(filtroActivo);\n\n    let cadena = \"http://localhost:8080/obtenerVacantesCercaYPorPalabraClave?id_municipio=\" + id_municipio + \"&palabraClave=\" + filtroActivo;\n    return this._http.get(cadena).toPromise();\n  }\n\n  buscarporEstado(id_estado: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerVacantesPorEsatdo\");\n    console.log(\"Info Enviada\");\n    console.log(id_estado);\n    let cadena = \"http://localhost:8080/obtenerVacantesEstado/\"+id_estado;\n    return this._http.get(cadena).toPromise();\n  }\n\n  postularse(PostDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n\n  obtenerPostulaciones(idRequest: number): Observable<Postulacion[]> {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get<Postulacion[]>(cadena);\n  }\n\n  eliminarPostulacion(idRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n\n  }\n\n  //OBSERVABLE USUARIO\n  /*\n  getCandidate(): Observable<Candidato> {\n    return this.candidato$.asObservable();\n  }\n\n  updateCandidate() {\n    this.obtener().then((data: any) => {\n      this.candidato = data;\n      this.esparcir(this.candidato);\n    });\n  }\n\n  esparcir(candidato: Candidato) {\n    this.candidato$.next(candidato);\n  }\n\n  guaradarUsuario(usuario: Candidato) {\n    this.candidato = usuario;\n    this.candidato$.next(this.candidato);\n  }\n*/\n\n  //OBSERVABLE POSTULACIONES\n\n  getRequest(): Observable<Postulacion[]> {\n    return this.postulaciones$.asObservable();\n  }\n\n  updateRequest(id_candidato: number) {\n    this.obtenerPostulaciones(id_candidato).subscribe(data => {\n      this.postulaciones = data;\n      this.esparcirRequest(this.postulaciones);\n    });\n  }\n\n  esparcirRequest(postulaciones: Postulacion[]) {\n    this.postulaciones = postulaciones;\n    this.postulaciones$.next(this.postulaciones);\n  }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}