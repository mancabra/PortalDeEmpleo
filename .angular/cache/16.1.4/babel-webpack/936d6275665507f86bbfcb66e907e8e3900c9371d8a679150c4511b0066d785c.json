{"ast":null,"code":"import { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass InterfaceService {\n  constructor(_http) {\n    this._http = _http;\n    this.usuario = \"\";\n    this.correo = \"\";\n    this.usuario$ = new Subject();\n    this.alerts$ = new Subject();\n    this.alertas = [];\n    this.online = true;\n  }\n  ngOnInit() {\n    this.esVisitante();\n    //this.cargarUsuario(\"a\");\n  }\n\n  esVisitante() {\n    const USUARIO = {\n      tipoUsuario: 0\n    };\n    this.usuario = USUARIO;\n    console.log(this.usuario);\n  }\n  //INICIO DE SESION\n  login(userRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ligin\");\n    console.log(\"Info Enviada\");\n    console.log(userRequest);\n    return this._http.post(\"http://localhost:8080/Login\", userRequest).toPromise();\n  }\n  /*\n    // OBTENER INFORMACION POR CORREO\n    userData(userRequest: string) {\n      //prueba de funcionamiento\n      console.log(\"Proceso obtenerUsuario\");\n      console.log(\"Info Enviada\");\n      console.log(userRequest);\n  \n      let cadena = \"http://localhost:8080/obtenerUsuario/\" + userRequest;\n      return this._http.get(cadena).toPromise();\n    }\n  \n    cargarUsuario(mail: string) {\n      //prueba de funcionamiento\n      console.log(\"Proceso cargarUsuario\");\n      console.log(\"Info Enviada\");\n      console.log(mail);\n  \n      this.userData(mail).then((data: any) => {\n        this.usuario = data;\n        console.log(\"Estatus de usuario\");\n        console.log(this.usuario);\n  \n      });\n  \n      this.usuario$.next(this.usuario);\n    }\n  \n    esparcirUsuario() {\n      console.log(\"Esparcir usuario\");\n      if (this.usuario == \"\") {\n  \n        const USUARIO = {\n          id_usuario: 15,\n          nombre: \"Ramon\",\n          //------\n          edad: 26,\n          profesion: \"Desarrollador\",\n          id_candidato: 1,\n          //------\n          correoElectronico: \"ramon2@gmail.com\",\n          contraseña: \"password\",\n          tipoUsuario: 2,\n          apellidoP: \"Serrano\",\n          apellidoM: \"Gamez\",\n          telefono: \"(+52)48-95-67-34-12\",\n          estatusUsuario: true,\n          //------\n          domicilio: \"C.Pinos N.447 Col.Nuevo Mundo\",\n          estado: { id_estado: 1, nombreEstado: \"México\" },\n          municipio: { id_municipio: 1, nombreMunicipio: \"Acolman\", id_estado: 1 },\n  \n          centroEducativo: \"UAM Azcapotzalco\",\n          puestoActual: \"Programador Jr\",\n          //------\n          descripcion: \"Lorem ipsum dolor sit amet consectetur adipiscing elit interdum nascetur purus, libero integer qui\"\n            + \"ut facilisi hac suspendisse pretium ad urna, consequat id natoque sollicitudin orci mi tristique quisque posuere.\"\n            + \"Lorem ipsum dolor sit amet consectetur adipiscing elit interdum nascetur purus, libero integer qui\"\n            + \"ut facilisi hac suspendisse pretium ad urna, consequat id natoque sollicitudin orci mi tristique quisque posuere.\"\n            + \"Lorem ipsum dolor sit amet consectetur adipiscing elit interdum nascetur purus, libero integer qui\",\n  \n        }\n        this.usuario = USUARIO;\n  \n      } else if(this.usuario == null){\n  \n      } else{\n  \n      }\n  \n      this.usuario$.next(this.usuario);\n    }\n  \n    guaradarCorreo(correo:any){\n      this.correo = correo;\n      console.log(this.correo);\n    }\n  \n    getUser(): Observable<any> {\n      return this.usuario$.asObservable();\n    }\n  \n    buscarUsuario(){\n      console.log(\"Proceso buscarUsuario\");\n      console.log(\"Info Enviada\");\n      console.log(this.correo);\n  \n      let cadena = \"http://localhost:8080/obtenerUsuario/\" + this.correo;\n      return this._http.get(cadena).toPromise();\n    }\n  \n    actualizarUsuario(usuario:any){\n      this.usuario = usuario;\n      console.log(this.usuario);\n      this.usuario$.next(this.usuario);\n    }\n  \n    */\n  obtenerEstados() {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerEstados\");\n    return this._http.get(\"http://localhost:8080/obtenerListaEstados\");\n  }\n  obtenerMunicipios(idRequest) {\n    console.log(\"Proceso obtenerMunicipios\");\n    console.log(\"Info Enviada\");\n    console.log(idRequest);\n    let cadena = \"http://localhost:8080/botenerMunicipiosDeEstado/\" + idRequest;\n    return this._http.get(cadena);\n  }\n  // arreglo alertas\n  getAlerts() {\n    return this.alerts$.asObservable();\n  }\n  esparcirAlertas() {\n    this.alerts$.next(this.alertas);\n  }\n  agregarAlerta(alert) {\n    this.alertas.push(alert);\n    this.alerts$.next(this.alertas);\n  }\n}\nInterfaceService.ɵfac = function InterfaceService_Factory(t) {\n  return new (t || InterfaceService)(i0.ɵɵinject(i1.HttpClient));\n};\nInterfaceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: InterfaceService,\n  factory: InterfaceService.ɵfac,\n  providedIn: 'root'\n});\nexport { InterfaceService };","map":{"version":3,"names":["Subject","InterfaceService","constructor","_http","usuario","correo","usuario$","alerts$","alertas","online","ngOnInit","esVisitante","USUARIO","tipoUsuario","console","log","login","userRequest","post","toPromise","obtenerEstados","get","obtenerMunicipios","idRequest","cadena","getAlerts","asObservable","esparcirAlertas","next","agregarAlerta","alert","push","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/InterfaceServices/interface.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { Municipio } from '../Entity/municipio';\nimport { Estado } from '../Entity/estado';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterfaceService {\n\n  usuario: any = \"\";\n  correo:string =\"\";\n\n  private usuario$ = new Subject<any>();\n  private alerts$ = new Subject<any>();\n  alertas: any = [];\n  online: boolean = true;\n\n  constructor(private _http: HttpClient) { }\n\n  ngOnInit() {\n    this.esVisitante();\n    //this.cargarUsuario(\"a\");\n  }\n\n  esVisitante() {\n    const USUARIO = {\n      tipoUsuario: 0,\n    }\n    this.usuario = USUARIO;\n    console.log(this.usuario);\n  }\n\n  //INICIO DE SESION\n  login(userRequest: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ligin\");\n    console.log(\"Info Enviada\");\n    console.log(userRequest);\n\n    return this._http.post(\"http://localhost:8080/Login\", userRequest).toPromise();\n  }\n\n/*\n  // OBTENER INFORMACION POR CORREO\n  userData(userRequest: string) {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(userRequest);\n\n    let cadena = \"http://localhost:8080/obtenerUsuario/\" + userRequest;\n    return this._http.get(cadena).toPromise();\n  }\n\n  cargarUsuario(mail: string) {\n    //prueba de funcionamiento\n    console.log(\"Proceso cargarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(mail);\n\n    this.userData(mail).then((data: any) => {\n      this.usuario = data;\n      console.log(\"Estatus de usuario\");\n      console.log(this.usuario);\n\n    });\n\n    this.usuario$.next(this.usuario);\n  }\n\n  esparcirUsuario() {\n    console.log(\"Esparcir usuario\");\n    if (this.usuario == \"\") {\n\n      const USUARIO = {\n        id_usuario: 15,\n        nombre: \"Ramon\",\n        //------\n        edad: 26,\n        profesion: \"Desarrollador\",\n        id_candidato: 1,\n        //------\n        correoElectronico: \"ramon2@gmail.com\",\n        contraseña: \"password\",\n        tipoUsuario: 2,\n        apellidoP: \"Serrano\",\n        apellidoM: \"Gamez\",\n        telefono: \"(+52)48-95-67-34-12\",\n        estatusUsuario: true,\n        //------\n        domicilio: \"C.Pinos N.447 Col.Nuevo Mundo\",\n        estado: { id_estado: 1, nombreEstado: \"México\" },\n        municipio: { id_municipio: 1, nombreMunicipio: \"Acolman\", id_estado: 1 },\n\n        centroEducativo: \"UAM Azcapotzalco\",\n        puestoActual: \"Programador Jr\",\n        //------\n        descripcion: \"Lorem ipsum dolor sit amet consectetur adipiscing elit interdum nascetur purus, libero integer qui\"\n          + \"ut facilisi hac suspendisse pretium ad urna, consequat id natoque sollicitudin orci mi tristique quisque posuere.\"\n          + \"Lorem ipsum dolor sit amet consectetur adipiscing elit interdum nascetur purus, libero integer qui\"\n          + \"ut facilisi hac suspendisse pretium ad urna, consequat id natoque sollicitudin orci mi tristique quisque posuere.\"\n          + \"Lorem ipsum dolor sit amet consectetur adipiscing elit interdum nascetur purus, libero integer qui\",\n\n      }\n      this.usuario = USUARIO;\n\n    } else if(this.usuario == null){\n\n    } else{\n\n    }\n\n    this.usuario$.next(this.usuario);\n  }\n\n  guaradarCorreo(correo:any){\n    this.correo = correo;\n    console.log(this.correo);\n  }\n\n  getUser(): Observable<any> {\n    return this.usuario$.asObservable();\n  }\n\n  buscarUsuario(){\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n\n    let cadena = \"http://localhost:8080/obtenerUsuario/\" + this.correo;\n    return this._http.get(cadena).toPromise();\n  }\n\n  actualizarUsuario(usuario:any){\n    this.usuario = usuario;\n    console.log(this.usuario);\n    this.usuario$.next(this.usuario);\n  }\n\n  */\n\n\n  obtenerEstados():Observable<Estado[]> {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerEstados\");\n\n    return this._http.get<Estado[]>(\"http://localhost:8080/obtenerListaEstados\");\n  }\n\n  obtenerMunicipios(idRequest: number):Observable<Municipio[]> {\n    console.log(\"Proceso obtenerMunicipios\");\n    console.log(\"Info Enviada\");\n    console.log(idRequest);\n    let cadena = \"http://localhost:8080/botenerMunicipiosDeEstado/\" + idRequest;\n    return this._http.get<Municipio[]>(cadena);\n  }\n\n  // arreglo alertas\n  getAlerts(): Observable<any> {\n    return this.alerts$.asObservable();\n  }\n\n  esparcirAlertas() {\n    this.alerts$.next(this.alertas);\n  }\n\n  agregarAlerta(alert: any) {\n\n    this.alertas.push(alert);\n    this.alerts$.next(this.alertas);\n  }\n\n\n}\n"],"mappings":"AAEA,SAAqBA,OAAO,QAAQ,MAAM;;;AAI1C,MAGaC,gBAAgB;EAU3BC,YAAoBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IARzB,KAAAC,OAAO,GAAQ,EAAE;IACjB,KAAAC,MAAM,GAAS,EAAE;IAET,KAAAC,QAAQ,GAAG,IAAIN,OAAO,EAAO;IAC7B,KAAAO,OAAO,GAAG,IAAIP,OAAO,EAAO;IACpC,KAAAQ,OAAO,GAAQ,EAAE;IACjB,KAAAC,MAAM,GAAY,IAAI;EAEmB;EAEzCC,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,EAAE;IAClB;EACF;;EAEAA,WAAWA,CAAA;IACT,MAAMC,OAAO,GAAG;MACdC,WAAW,EAAE;KACd;IACD,IAAI,CAACT,OAAO,GAAGQ,OAAO;IACtBE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,OAAO,CAAC;EAC3B;EAEA;EACAY,KAAKA,CAACC,WAAgB;IACpB;IACAH,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;IAC5BD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACE,WAAW,CAAC;IAExB,OAAO,IAAI,CAACd,KAAK,CAACe,IAAI,CAAC,6BAA6B,EAAED,WAAW,CAAC,CAACE,SAAS,EAAE;EAChF;EAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoGEC,cAAcA,CAAA;IACZ;IACAN,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IAErC,OAAO,IAAI,CAACZ,KAAK,CAACkB,GAAG,CAAW,2CAA2C,CAAC;EAC9E;EAEAC,iBAAiBA,CAACC,SAAiB;IACjCT,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IACxCD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC3BD,OAAO,CAACC,GAAG,CAACQ,SAAS,CAAC;IACtB,IAAIC,MAAM,GAAG,kDAAkD,GAAGD,SAAS;IAC3E,OAAO,IAAI,CAACpB,KAAK,CAACkB,GAAG,CAAcG,MAAM,CAAC;EAC5C;EAEA;EACAC,SAASA,CAAA;IACP,OAAO,IAAI,CAAClB,OAAO,CAACmB,YAAY,EAAE;EACpC;EAEAC,eAAeA,CAAA;IACb,IAAI,CAACpB,OAAO,CAACqB,IAAI,CAAC,IAAI,CAACpB,OAAO,CAAC;EACjC;EAEAqB,aAAaA,CAACC,KAAU;IAEtB,IAAI,CAACtB,OAAO,CAACuB,IAAI,CAACD,KAAK,CAAC;IACxB,IAAI,CAACvB,OAAO,CAACqB,IAAI,CAAC,IAAI,CAACpB,OAAO,CAAC;EACjC;;AAnKWP,gBAAgB,C;mBAAhBA,gBAAgB,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAhBlC,gBAAgB,C;SAAhBA,gBAAgB;EAAAmC,OAAA,EAAhBnC,gBAAgB,CAAAoC,IAAA;EAAAC,UAAA,EAFf;AAAM;SAEPrC,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}