{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../InterfaceServices/interface.service\";\nclass CandidateService {\n  constructor(_http, _UserRequest) {\n    this._http = _http;\n    this._UserRequest = _UserRequest;\n    this.id_candidato = 0;\n    this.correo = \"\";\n    this.candidato = new Candidato();\n    this.postulaciones = [];\n    this.postulaciones$ = new Subject();\n    this.subscription = this._UserRequest.getUser().subscribe(data => {\n      this.candidato = data;\n    });\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n  guaradarCorreo(correo) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n  obtener(CandidateRequest) {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + CandidateRequest;\n    return this._http.get(cadena).toPromise();\n  }\n  registrar(CandidateRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest).subscribe(resultado => {\n      this.id_candidato = resultado;\n    });\n    return this.id_candidato;\n  }\n  modificar(CandidatoDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n  buscarporFiltro(BusquedaDTO) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n  postularse(PostDTO) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n    this.esparcirPostulaciones();\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n  obtenerPostulaciones(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get(cadena);\n  }\n  eliminarPostulacion(idRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    this.esparcirPostulaciones();\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n  }\n  getPostulaciones() {\n    return this.postulaciones$.asObservable();\n  }\n  esparcirPostulaciones() {\n    this.obtenerPostulaciones(this.candidato.id_candidato).subscribe(data => {\n      this.postulaciones = data;\n      console.log(this.postulaciones);\n    });\n    this.postulaciones$.next(this.postulaciones);\n  }\n}\nCandidateService.ɵfac = function CandidateService_Factory(t) {\n  return new (t || CandidateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.InterfaceService));\n};\nCandidateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CandidateService,\n  factory: CandidateService.ɵfac,\n  providedIn: 'root'\n});\nexport { CandidateService };","map":{"version":3,"names":["Subject","Candidato","CandidateService","constructor","_http","_UserRequest","id_candidato","correo","candidato","postulaciones","postulaciones$","subscription","getUser","subscribe","data","ngOnInit","ngOnDestroy","unsubscribe","guaradarCorreo","console","log","obtener","CandidateRequest","cadena","get","toPromise","registrar","put","resultado","modificar","CandidatoDTO","obtenerVacantes","buscarporFiltro","BusquedaDTO","postularse","PostDTO","esparcirPostulaciones","obtenerPostulaciones","idRequest","eliminarPostulacion","delete","getPostulaciones","asObservable","next","i0","ɵɵinject","i1","HttpClient","i2","InterfaceService","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/CandidateServices/candidate.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, OnDestroy, OnInit } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { Candidato } from '../Entity/candidato';\nimport { Postulacion } from '../Entity/postulacion';\nimport { InterfaceService } from '../InterfaceServices/interface.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CandidateService implements OnInit, OnDestroy{\n\n  subscription: Subscription;\n  id_candidato: any = 0;\n  correo: string = \"\";\n  candidato: Candidato = new Candidato;\n\n  postulaciones: Postulacion[] = [];\n  private postulaciones$ = new Subject<any>();\n\n\n  constructor(private _http: HttpClient, private _UserRequest:InterfaceService) { \n    this.subscription = this._UserRequest.getUser().subscribe(data => {\n      this.candidato = data;\n    });\n  }\n  ngOnInit(): void {\n   \n  }\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  guaradarCorreo(correo:any){\n    this.correo = correo;\n    console.log(this.correo);\n  }\n\n  obtener(CandidateRequest:string) {\n\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + CandidateRequest;\n    return this._http.get<Candidato>(cadena).toPromise();\n  }\n\n  registrar(CandidateRequest: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidateRequest);\n\n    this._http.put(\"http://localhost:8080/registroCandidato\", CandidateRequest)\n      .subscribe(\n        resultado => { this.id_candidato = resultado }\n      );\n    return this.id_candidato;\n  }\n\n  modificar(CandidatoDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso ModificarCandidato\");\n    console.log(\"Info Enviada\");\n    console.log(CandidatoDTO);\n\n    return this._http.put(\"http://localhost:8080/modificarCandidato\", CandidatoDTO).toPromise();\n  }\n\n  obtenerVacantes() {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObternerVacantes\");\n    return this._http.get(\"http://localhost:8080/obtenerListaVacantes\").toPromise();\n  }\n\n  buscarporFiltro(BusquedaDTO: any) {\n    // VER COMO MANEJA SAMUEL LOS FILTROS\n    return this._http.get(\"http://localhost:8080/\", BusquedaDTO).toPromise();\n  }\n\n  postularse(PostDTO: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso Postularse\");\n    console.log(\"Info Enviada\");\n    console.log(PostDTO);\n\n    this.esparcirPostulaciones();\n\n    return this._http.put(\"http://localhost:8080/postulacion\", PostDTO).toPromise();\n  }\n\n  obtenerPostulaciones(idRequest: number):Observable<Postulacion[]>  {\n    //prueba de funcionamiento\n    console.log(\"Proceso ObtenerPostulaciones\");\n    console.log(\"Info Enviada id_candidato\" + idRequest);\n\n    let cadena = \"http://localhost:8080/obtenerPostulacionesPorIdDeCandidato/\" + idRequest;\n    return this._http.get<Postulacion[]>(cadena);\n  }\n\n  eliminarPostulacion(idRequest: number) {\n    //prueba de funcionamiento\n    console.log(\"Proceso EliminarPostulacion\");\n    console.log(\"Info Enviada id_postulacion\" + idRequest);\n    this.esparcirPostulaciones();\n\n    let cadena = \"http://localhost:8080/eliminarPostulacion/\" + idRequest;\n    return this._http.delete(cadena).toPromise();\n\n  }\n\n  getPostulaciones(): Observable<Postulacion[]> {\n    return this.postulaciones$.asObservable();\n  }\n\n  esparcirPostulaciones() {\n      this.obtenerPostulaciones(this.candidato.id_candidato).subscribe(data => {\n        this.postulaciones = data;\n        console.log(this.postulaciones);\n      });\n    this.postulaciones$.next(this.postulaciones);\n  }\n\n\n\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}