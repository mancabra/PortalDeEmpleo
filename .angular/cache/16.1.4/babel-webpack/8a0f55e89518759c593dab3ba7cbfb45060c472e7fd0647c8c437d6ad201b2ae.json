{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { Vacante } from '../Entity/vacante';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass EmployerService {\n  constructor(_http) {\n    this._http = _http;\n    this.id_empleador = 0;\n    this.correo = \"manuel97@gmail.com\";\n    this.vacante = new Vacante();\n    this.vacante$ = new Subject();\n  }\n  guaradarCorreo(correo) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n  registrar(EmployerRequest) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarEmpleador\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n    return this._http.put(\"http://localhost:8080/registroEmpleador\", EmployerRequest).toPromise();\n  }\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get(cadena).toPromise();\n  }\n  // OBTENER PUBLICACIONES DE CANDIDATO\n  obtenerPublicaciones(EmployerRequest) {\n    console.log(\"Proceso obtener publicaciones\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n    let cadena = \"http://localhost:8080/obtenerVacantesPorIdEmpleador/\" + EmployerRequest;\n    return this._http.get(cadena);\n  }\n  // OBTENER CANDIDATOS DE LA VACANTE\n  ontenerCandidatosVacante(EmployerRequest) {\n    console.log(\"Proceso obtener CandidatosVacante\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n    let cadena = \"http://localhost:8080/obtenerVacantesPorIdEmpleador/\" + EmployerRequest;\n    return this._http.get(cadena);\n  }\n  // ELIMINAR VACANTE\n  eliminarVacante(EmployerRequest) {\n    console.log(\"Proceso eliminarVacante\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n    let cadena = \"http://localhost:8080/eliminarVacante/\" + EmployerRequest;\n    return this._http.delete(cadena).toPromise();\n  }\n  // OBTENER EMPRESAS\n  obtenerEmpresas() {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerEmpresas\");\n    return this._http.get(\"http://localhost:8080/obtenerListaEmpresas\");\n  }\n  obtenerTiposDehorario() {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerTiposHorario\");\n    return this._http.get(\"http://localhost:8080/obtenerTiposHorario\");\n  }\n  obtenerTiposContratacion() {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerTiposContratacion\");\n    return this._http.get(\"http://localhost:8080/obtenerTiposContratacion\");\n  }\n  obtenerModalidades() {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerModalidades\");\n    return this._http.get(\"http://localhost:8080/obtenerModalidadesTrabajo\");\n  }\n  publicarVacante(EmployerRequest) {\n    console.log(\"Proceso publicarVcanate\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n    return this._http.put(\"http://localhost:8080/crearVacante\", EmployerRequest).toPromise();\n  }\n  modificarVacante(EmployerRequest) {\n    console.log(\"Proceso modificarVacante\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n    return this._http.put(\"http://localhost:8080/modificarVacante\", EmployerRequest).toPromise();\n  }\n  getVacante() {\n    return this.vacante$.asObservable();\n  }\n  guardarVacante(EmployerRequest) {\n    this.vacante = EmployerRequest;\n    this.cargarVacante();\n  }\n  cargarVacante() {\n    this.vacante = this.vacante;\n    this.vacante$.next(this.vacante);\n  }\n}\nEmployerService.ɵfac = function EmployerService_Factory(t) {\n  return new (t || EmployerService)(i0.ɵɵinject(i1.HttpClient));\n};\nEmployerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployerService,\n  factory: EmployerService.ɵfac,\n  providedIn: 'root'\n});\nexport { EmployerService };","map":{"version":3,"names":["Subject","Vacante","EmployerService","constructor","_http","id_empleador","correo","vacante","vacante$","guaradarCorreo","console","log","registrar","EmployerRequest","put","toPromise","obtener","cadena","get","obtenerPublicaciones","ontenerCandidatosVacante","eliminarVacante","delete","obtenerEmpresas","obtenerTiposDehorario","obtenerTiposContratacion","obtenerModalidades","publicarVacante","modificarVacante","getVacante","asObservable","guardarVacante","cargarVacante","next","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/mancabra/Documents/PortalDeEmpleo/src/app/Services/EmployerServices/employer.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\nimport { Empresa } from '../Entity/empresa';\nimport { TipoHorario } from '../Entity/tipo-horario';\nimport { TipoContratacion } from '../Entity/tipo-contratacion';\nimport { ModalidadTrabajo } from '../Entity/modalidad-trabajo';\nimport { Empleador } from '../Entity/empleador';\nimport { Vacante } from '../Entity/vacante';\nimport { Candidato } from '../Entity/candidato';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmployerService {\n\n  id_empleador: any = 0;\n  correo: string = \"manuel97@gmail.com\";\n  vacante: Vacante = new Vacante;\n  private vacante$ = new Subject<Vacante>();\n\n  constructor(private _http: HttpClient) { }\n\n  guaradarCorreo(correo: any) {\n    this.correo = correo;\n    console.log(this.correo);\n  }\n\n\n  registrar(EmployerRequest: any) {\n    //prueba de funcionamiento\n    console.log(\"Proceso RegistrarEmpleador\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n\n    return this._http.put(\"http://localhost:8080/registroEmpleador\", EmployerRequest).toPromise();\n  }\n\n  obtener() {\n    console.log(\"Proceso buscarUsuario\");\n    console.log(\"Info Enviada\");\n    console.log(this.correo);\n\n    let cadena = \"http://localhost:8080/obtenerUsuarioCompleto/\" + this.correo;\n    return this._http.get<Empleador>(cadena).toPromise();\n  }\n\n  // OBTENER PUBLICACIONES DE CANDIDATO\n  obtenerPublicaciones(EmployerRequest: any): Observable<Vacante[]> {\n    console.log(\"Proceso obtener publicaciones\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n\n    let cadena =\"http://localhost:8080/obtenerVacantesPorIdEmpleador/\" + EmployerRequest;\n\n    return this._http.get<Vacante[]>(cadena);\n  }\n\n  // OBTENER CANDIDATOS DE LA VACANTE\n  ontenerCandidatosVacante(EmployerRequest: number): Observable<Candidato[]>{\n    console.log(\"Proceso obtener CandidatosVacante\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n\n    let cadena =\"http://localhost:8080/obtenerVacantesPorIdEmpleador/\" + EmployerRequest;\n    return this._http.get<Candidato[]>(cadena);\n  }\n\n  // ELIMINAR VACANTE\n  eliminarVacante(EmployerRequest: number){\n    console.log(\"Proceso eliminarVacante\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n\n    let cadena = \"http://localhost:8080/eliminarVacante/\"+EmployerRequest;\n\n    return this._http.delete(cadena).toPromise();\n  }\n\n  // OBTENER EMPRESAS\n  obtenerEmpresas(): Observable<Empresa[]> {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerEmpresas\");\n\n    return this._http.get<Empresa[]>(\"http://localhost:8080/obtenerListaEmpresas\");\n  }\n\n  obtenerTiposDehorario(): Observable<TipoHorario[]> {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerTiposHorario\");\n\n    return this._http.get<TipoHorario[]>(\"http://localhost:8080/obtenerTiposHorario\");\n  }\n\n  obtenerTiposContratacion(): Observable<TipoContratacion[]> {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerTiposContratacion\");\n\n    return this._http.get<TipoContratacion[]>(\"http://localhost:8080/obtenerTiposContratacion\");\n  }\n\n  obtenerModalidades(): Observable<ModalidadTrabajo[]> {\n    //prueba de funcionamiento\n    console.log(\"Proceso obtenerModalidades\");\n\n    return this._http.get<ModalidadTrabajo[]>(\"http://localhost:8080/obtenerModalidadesTrabajo\");\n  }\n\n  publicarVacante(EmployerRequest: any){\n    console.log(\"Proceso publicarVcanate\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n\n    return this._http.put(\"http://localhost:8080/crearVacante\", EmployerRequest).toPromise();\n\n  }\n\n  modificarVacante(EmployerRequest: any){\n    console.log(\"Proceso modificarVacante\");\n    console.log(\"Info Enviada\");\n    console.log(EmployerRequest);\n\n    return this._http.put(\"http://localhost:8080/modificarVacante\", EmployerRequest).toPromise();\n  }\n\n  \n\n  getVacante(): Observable<Vacante> {\n    return this.vacante$.asObservable();\n  }\n\n  guardarVacante(EmployerRequest: Vacante){\n    this.vacante = EmployerRequest;\n    this.cargarVacante();\n  }\n\n  cargarVacante(){\n    this.vacante = this.vacante;\n    this.vacante$.next(this.vacante);\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}